{"./":{"url":"./","title":"首页","keywords":"","body":"基于GitBook的博客搭建 通过NPM安装gitbook npm install gitbook-cli -g 初始化项目(新建文件) gitbook init 启动服务 gitbook serve // serve on http://localhost:4000/ 根目录下新建book.json { \"title\": \"前端笔记\", \"author\": \"yjtmD\", \"description\": \"前端笔记积累\", \"language\": \"zh-hans\", \"output.name\": \"site\", \"gitbook\": \"3.2.3\", \"root\": \".\", \"styles\": { \"website\": \"styles/website.css\" }, \"links\": { }, \"plugins\": [ \"-lunr\", \"-search\", \"-highlight\", \"search-plus\", \"simple-page-toc\", \"prism\", \"prism-themes\", \"github\", \"donate\", \"anchor-navigation-ex\", \"expandable-menu\", \"splitter\", \"include-codeblock\", \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] }, \"github\": { \"url\": \"https://github.com/yjtmD/wx-notes\" }, \"donate\": { \"wechat\": \"http://www.wxylx.top/images/wechat.jpg\", \"alipay\": \"http://www.wxylx.top/images/alipay.jpg\", \"title\": \"\", \"button\": \"打赏\", \"alipayText\": \"支付宝捐赠\", \"wechatText\": \"微信捐赠\" }, \"anchor-navigation-ex\": { \"isRewritePageTitle\": false, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" }, \"include-codeblock\": { \"template\": \"ace\", \"unindent\": true, \"edit\": true }, \"tbfed-pagefooter\": { \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 安装插件 gitbook install 关联git仓库 全局安装gh-pages工具 npm install gh-pages -g _book部署到分支 gh-pages -d _book 关联域名,添加CNNAME文件 powered by Gitbook该文件修订时间： 2018-12-13 10:50:36 "},"HTML/1.html":{"url":"HTML/1.html","title":"demo","keywords":"","body":"demo powered by Gitbook该文件修订时间： 2018-12-06 10:51:40 "},"CSS/1.html":{"url":"CSS/1.html","title":"demo","keywords":"","body":"demo powered by Gitbook该文件修订时间： 2018-12-06 10:53:50 "},"JS/数据类型.html":{"url":"JS/数据类型.html","title":"数据类型","keywords":"","body":"数据类型 概览: 新的 ECMAScript 标准定义了 7 种数据类型 基本数据类型 Boolean Number String Undefined Null Symbol(ES6新定义) Object Boolean 有两种取值true和false // 值为false的Boolean对象 var bNoParam = Boolean(); var bZero = Boolean(0); var bNull = Boolean(null); var bEmptyString = Boolean(''); var bfalse = Boolean(false); // 值为true的Boolean对象 var btrue = Boolean(true); var btrueString = Boolean('true'); var bfalseString = Boolean('false'); var bSuLin = Boolean('Su Lin'); var bArrayProto = Boolean([]); var bObjProto = Boolean({}); Number String Undefined 一个变量被声明，但是未赋值，会有默认值undefined 一个函数如果没有使用return语句指定返回值，就会返回一个undefined值 判断undefined的方式 var foo; /** * 必须使用严格相等操作符（===）而不是标准相等操作符（==），因为 foo == undefined 会检查foo是不是null， * 但是严格相等不会检查。null不等同于undefined。 */ foo === undefined; // true // a未声明 typeof a === 'undefined'; // true // a === undefined; // 会报错\"Uncaught ReferenceError: a is not defined\" foo === void 0; // true // a === void 0; // 会报错\"Uncaught ReferenceError: a is not defined\" Null null是一个字面量，指示变量未指向任何对象 // foo不存在，它从来没有被定义过或者是初始化过： foo; \"Uncaught ReferenceError: foo is not defined\" // foo现在已经是知存在的，但是它没有类型或者是值： var foo = null; foo; null null和undefined不同点： typeof null; // object typeof undefined; // undefined null === undefined; // false null == undefined; // true null === null; // true !null; // true 1 + null; // 1 1 + undefined; // NaN Symbol 这个类型的值可以用来创建匿名的对象属性 该数据类型通常被用作一个对象属性的键值 Symbol(\"foo\") !== Symbol(\"foo\") const foo = Symbol() const bar = Symbol() typeof foo === \"symbol\" typeof bar === \"symbol\" let obj = {} obj[foo] = \"foo\" obj[bar] = \"bar\" JSON.stringify(obj) // {} Object.keys(obj) // [] Object.getOwnPropertyNames(obj) // [] Object.getOwnPropertySymbols(obj) // [ foo, bar ] Object powered by Gitbook该文件修订时间： 2018-12-13 10:48:08 "},"FRAME/Vue/":{"url":"FRAME/Vue/","title":"vue","keywords":"","body":"vue powered by Gitbook该文件修订时间： 2018-12-06 23:04:30 "},"Net/nginx配置.html":{"url":"Net/nginx配置.html","title":"Nginx配置文件","keywords":"","body":"Nginx配置文件 一个Nginx代理多个vue项目的配置 Vue项目配置 vue-router设置 let router = new Router({ mode: 'history', base:'/kprm-web/', routes: [ // your routes ] }) config/index.js 打包设置(设置build下的 assetsPublicPath) assetsPublicPath: '/kprm-web/' nginx.conf配置 #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server { listen 8088; server_name localhost; root /opt; #charset koi8-r; #access_log logs/host.access.log main; location / { try_files $uri $uri/ /baas-web/index.html; } location /baas-web { try_files $uri $uri/ /baas-web/index.html; } location /kprm-web { try_files $uri $uri/ /kprm-web/index.html; } location /bcmp-web { try_files $uri $uri/ /bcmp-web/index.html; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ { # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #} # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\\.ht { # deny all; #} } } powered by Gitbook该文件修订时间： 2018-12-13 10:38:16 "}}